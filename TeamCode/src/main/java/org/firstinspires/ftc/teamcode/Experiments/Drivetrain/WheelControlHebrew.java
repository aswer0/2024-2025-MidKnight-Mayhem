חבילה ארגון.ראשונההשראה.קבוצתקוד.ניסויים.נהיגה;

ייבוא לוחמחוונים.לוחמחווניםשלנו;
ייבוא לוחמחוונים.מנת_טלמטריה;
ייבוא חומרה.מנוע;
ייבוא חומרה.מנוע_מוגבר;
ייבוא חומרה.מפתחומרה;
ייבוא חומרה.חיישןמתח;

//
ציבורי כיתה שליטתגלגל {
    ציבורי מנוע_מוגבר אחוריאמין;
    ציבורי מנוע_מוגבר אחורישמאל;
    ציבורי מנוע_מוגבר קדמיאמין;
    ציבורי מנוע_מוגבר קדמישמאל;
    ציבורי כפול קידוםחזיתי = 0;
    ציבורי כפול קידוםצדדי = 0;
    ציבורי כפול קידוםסיבובי = 0;
    פרטיחיישןמתח חיישן;

    אודומטריה אודומטריה;
    תיקוןנהיגה תיקון;
    כפול זוית_מטרה = 0;

    לוחמחווניםשלנו לוח = לוחמחווניםשלנו.קבל();

    ציבורי שליטתגלגל(מפתחומרה מפה, אודומטריה אודומטריה) {
        זה.אחוריאמין = מפה.קבל(מנוע_מוגבר.כיתה, "BR");
        זה.אחוריאמין.קבע_התנהגות_אפס(מנוע.התנהגות_אפס.ציפה);
        זה.קדמיאמין = מפה.קבל(מנוע_מוגבר.כיתה, "FR");
        זה.קדמיאמין.קבע_התנהגות_אפס(מנוע.התנהגות_אפס.ציפה);
        זה.אחורישמאל = מפה.קבל(מנוע_מוגבר.כיתה, "BL");
        זה.אחורישמאל.קבע_התנהגות_אפס(מנוע.התנהגות_אפס.ציפה);
        זה.קדמישמאל = מפה.קבל(מנוע_מוגבר.כיתה, "FL");
        זה.קדמישמאל.קבע_התנהגות_אפס(מנוע.התנהגות_אפס.ציפה);

        זה.אחורישמאל.קבע_כיוון(מנוע_מוגבר.כיוון.הפוך);
        זה.קדמישמאל.קבע_כיוון(מנוע_מוגבר.כיוון.הפוך);

        זה.אודומטריה = אודומטריה;
        זה.חיישן = מפה.קבל(חיישןמתח.כיתה, "Control Hub");
        זה.תיקון = חדש תיקוןנהיגה(אודומטריה);
    }

    ציבורי ריק קבע_כוחות(כפול שמאל_אחורי, כפול ימין_אחורי, כפול שמאל_קדמי, כפול ימין_קדמי, כפול כח) {
        כפול מקס = 1;
        מקס = מתמטיקה.מקסימלי(שמאל_אחורי, מקס);
        מקס = מתמטיקה.מקסימלי(ימין_אחורי, מקס);
        מקס = מתמטיקה.מקסימלי(שמאל_קדמי, מקס);
        מקס = מתמטיקה.מקסימלי(ימין_קדמי, מקס);

        זה.אחורישמאל.הגדר_כח(כח * (שמאל_אחורי/מקס));
        זה.אחוריאמין.הגדר_כח(כח * (ימין_אחורי/מקס));
        זה.קדמישמאל.הגדר_כח(כח * (שמאל_קדמי/מקס));
        זה.קדמיאמין.הגדר_כח(כח * (ימין_קדמי/מקס));
    }

    /**
     * @param קדימה רכיב ה-Y של הוקטור (יחסית לרובוט)
     * @param ימין רכיב ה-X של הוקטור (יחסית לרובוט)
     * @param סיבוב מהירות סיבוב ברדיאנים
     * @param כיוון זוית לפי אודומטריה (יחסית לשדה)
     * @param כח עוצמת תנועה
     */
    ציבורי ריק נהיגה(כפול קדימה, כפול ימין, כפול סיבוב, כפול כיוון, כפול כח) {
        כפול חדשX = ימין * מתמטיקה.קוס(כיוון) - קדימה * מתמטיקה.סין(כיוון);
        כפול חדשY = ימין * מתמטיקה.סין(כיוון) + קדימה * מתמטיקה.קוס(כיוון);

        כפול כחBL = חדשY + חדשX + סיבוב;
        כפול כחBR = חדשY - חדשX - סיבוב;
        כפול כחFL = חדשY - חדשX + סיבוב;
        כפול כחFR = חדשY + חדשX - סיבוב;

        כפול מקס = 1;
        מקס = מתמטיקה.מקסימלי(כחBL, מקס);
        מקס = מתמטיקה.מקסימלי(כחBR, מקס);
        מקס = מתמטיקה.מקסימלי(כחFL, מקס);
        מקס = מתמטיקה.מקסימלי(כחFR, מקס);

        אם (כחBL != 0) {
            זה.אחורישמאל.הגדר_כח(כח * (כחBL/מקס) + זה.קידוםחזיתי * כחBL / מתמטיקה.ערך_מוחלט(כחBL));
        } אחר {
            זה.אחורישמאל.הגדר_כח(0);
        }

        אם (כחBR != 0) {
            זה.אחוריאמין.הגדר_כח(כח * (כחBR/מקס) + זה.קידוםחזיתי * כחBR / מתמטיקה.ערך_מוחלט(כחBR));
        } אחר {
            זה.אחוריאמין.הגדר_כח(0);
        }

        אם (כחFL != 0) {
            זה.קדמישמאל.הגדר_כח(כח * (כחFL/מקס) + זה.קידוםחזיתי * כחFL / מתמטיקה.ערך_מוחלט(כחFL));
        } אחר {
            זה.קדמישמאל.הגדר_כח(0);
        }

        אם (כחFR != 0) {
            זה.קדמיאמין.הגדר_כח(כח * (כחFR/מקס) + זה.קידוםחזיתי * כחFR / מתמטיקה.ערך_מוחלט(כחFR));
        } אחר {
            זה.קדמיאמין.הגדר_כח(0);
        }
    }

    // כל שאר המתודות יתורגמו באופן דומה...
}
